/* JavaCCParser.java */
/* Generated By:JavaCC: Do not edit this line. JavaCCParser.java */
package jminusminus;

import java.util.ArrayList;

/**
 * Parser generated by JavaCC. It parses a j-- compilation unit (program file), taking tokens from
 * the scanner (also generated by JavaCC), and produces an abstract syntax tree (AST) for it.
 */
class JavaCCParser implements JavaCCParserConstants {
    // Whether a parser error has been found.
    private boolean errorHasOccurred;

    // Name of the file that is parsed.
    private String fileName;

    /**
     * Sets the name of the file being parsed.
     *
     * @param fileName name of the file being parsed.
     */
    public void fileName(String fileName) {
        this.fileName = fileName;
    }

    /**
     * Returns {@code true} if a parser error has occurred up to now, and {@code false} otherwise.
     *
     * @return {@code true} if a parser error has occurred up to now, and {@code false} otherwise.
     */
    public boolean errorHasOccurred() {
        return errorHasOccurred;
    }

    // Pulls out and returns the ambiguous part of a name.
    private AmbiguousName ambiguousPart(TypeName name) {
        String qualifiedName = name.toString();
        int i = qualifiedName.lastIndexOf('.');
        return i == -1 ? null : new AmbiguousName(name.line(), qualifiedName.substring(0, i));
    }

    // Reports a syntax error.
    private void reportParserError(String message, Object... args) {
        errorHasOccurred = true;
        System.err.printf("%s:%d: error: ", fileName, token.beginLine);
        System.err.printf(message, args);
        System.err.println();
    }

    // Recover from the parser error that occurred by skipping to any of the specified tokens.
    // Current error recovery mechanism is rather simple-minded and is based on skipping all the
    // tokens until a SEMI or an EOF is encountered. This scheme can be enhanced by passing in the
    // FOLLOW-SET of the non-terminal at hand.
    private void recoverFromError(int[] skipTo, ParseException e) {
        // Get the possible expected tokens.
        StringBuffer expected = new StringBuffer();
        for (int i = 0; i < e.expectedTokenSequences.length; i++) {
            for (int j = 0; j < e.expectedTokenSequences[i].length; j++) {
                expected.append("\n");
                expected.append("    ");
                expected.append(tokenImage[e.expectedTokenSequences[i][j]]);
                expected.append("...");
            }
        }

        // Print error message.
        if (e.expectedTokenSequences.length == 1) {
            reportParserError("\"%s\" found where %s sought", getToken(1), expected);
        } else {
            reportParserError("\"%s\" found where one of %s sought", getToken(1), expected);
        }

        // Recover.
        boolean loop = true;
        do {
            token = getNextToken();
            for (int i = 0; i < skipTo.length; i++) {
                if (token.kind == skipTo[i]) {
                    loop = false;
                    break;
                }
            }
        } while(loop);
    }

  final public JCompilationUnit compilationUnit() throws ParseException {int line = 0;
    TypeName packageName = null;
    TypeName anImport = null;
    ArrayList<TypeName> imports = new ArrayList<>();
    JAST aTypeDeclaration = null;
    ArrayList<JAST> typeDeclarations = new ArrayList<>();
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PACKAGE:{
        jj_consume_token(PACKAGE);
line = token.beginLine;
        packageName = qualifiedIdentifier();
        jj_consume_token(SEMI);
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IMPORT:{
          ;
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
        jj_consume_token(IMPORT);
line = line == 0 ? token.beginLine : line;
        anImport = qualifiedIdentifier();
imports.add(anImport);
        jj_consume_token(SEMI);
      }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ABSTRACT:
        case CLASS:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case STATIC:{
          ;
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        aTypeDeclaration = typeDeclaration();
line = line == 0 ? aTypeDeclaration.line() : line;
                typeDeclarations.add(aTypeDeclaration);
      }
      jj_consume_token(0);
line = line == 0 ? token.beginLine : line;
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return new JCompilationUnit(fileName, line, packageName, imports, typeDeclarations);}
    throw new Error("Missing return statement in function");
}

  final private TypeName qualifiedIdentifier() throws ParseException {int line = 0;
    String qualifiedIdentifier = "";
    try {
      jj_consume_token(IDENTIFIER);
line = token.beginLine;
            qualifiedIdentifier = token.image;
      label_3:
      while (true) {
        if (jj_2_1(2147483647)) {
          ;
        } else {
          break label_3;
        }
        jj_consume_token(DOT);
        jj_consume_token(IDENTIFIER);
qualifiedIdentifier += "." + token.image;
      }
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return new TypeName(line, qualifiedIdentifier);}
    throw new Error("Missing return statement in function");
}

  final private JAST typeDeclaration() throws ParseException {ArrayList<String> mods = null;
    JAST typeDeclaration = null;
    try {
      mods = modifiers();
      typeDeclaration = classDeclaration(mods);
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return typeDeclaration;}
    throw new Error("Missing return statement in function");
}

  final private ArrayList<String> modifiers() throws ParseException {ArrayList<String> mods = new ArrayList<>();
    boolean scannedPUBLIC = false;
    boolean scannedPROTECTED = false;
    boolean scannedPRIVATE = false;
    boolean scannedSTATIC = false;
    boolean scannedABSTRACT = false;
    try {
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ABSTRACT:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case STATIC:{
          ;
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          break label_4;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ABSTRACT:{
          jj_consume_token(ABSTRACT);
mods.add("abstract");
                if (scannedABSTRACT) {
                    reportParserError("repeated modifier: abstract");
                }
                scannedABSTRACT = true;
          break;
          }
        case PRIVATE:{
          jj_consume_token(PRIVATE);
mods.add("private");
                if (scannedPRIVATE) {
                    reportParserError("repeated modifier: private");
                }
                if (scannedPUBLIC || scannedPROTECTED) {
                    reportParserError("access conflict in modifiers");
                }
                scannedPRIVATE = true;
          break;
          }
        case PROTECTED:{
          jj_consume_token(PROTECTED);
mods.add("protected");
                if (scannedPROTECTED) {
                    reportParserError("repeated modifier: protected");
                }
                if (scannedPUBLIC || scannedPRIVATE) {
                    reportParserError("access conflict in modifiers");
                }
                scannedPROTECTED = true;
          break;
          }
        case PUBLIC:{
          jj_consume_token(PUBLIC);
mods.add("public");
                if (scannedPUBLIC) {
                    reportParserError("repeated modifier: public");
                }
                if (scannedPROTECTED || scannedPRIVATE) {
                    reportParserError("access conflict in modifiers");
                }
                scannedPUBLIC = true;
          break;
          }
        case STATIC:{
          jj_consume_token(STATIC);
mods.add("static");
                if (scannedSTATIC) {
                    reportParserError("repeated modifier: static");
                }
                scannedSTATIC = true;
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return mods;}
    throw new Error("Missing return statement in function");
}

  final private JClassDeclaration classDeclaration(ArrayList<String> mods) throws ParseException {int line = 0;
    String name = "";
    Type superClass = Type.OBJECT;
    ArrayList<JMember> classBody = null;
    try {
      jj_consume_token(CLASS);
line = token.beginLine;
      jj_consume_token(IDENTIFIER);
name = token.image;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EXTENDS:{
        jj_consume_token(EXTENDS);
        superClass = qualifiedIdentifier();
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      classBody = classBody();
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return new JClassDeclaration(line, mods, name, superClass, null, classBody);}
    throw new Error("Missing return statement in function");
}

  final private ArrayList<JMember> classBody() throws ParseException {ArrayList<String> mods = null;
    JMember aMember = null;
    ArrayList<JMember> members = new ArrayList<>();
    try {
      jj_consume_token(LCURLY);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ABSTRACT:
        case BOOLEAN:
        case CHAR:
        case INT:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case STATIC:
        case VOID:
        case DOUBLE:
        case LONG:
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          break label_5;
        }
        mods = modifiers();
        aMember = memberDecl(mods);
members.add(aMember);
      }
      jj_consume_token(RCURLY);
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return members;}
    throw new Error("Missing return statement in function");
}

  final private JMember memberDecl(ArrayList<String> mods) throws ParseException {int line = 0;
    Type type = null;
    String name = "";
    ArrayList<JFormalParameter> params = null;
    JBlock body = null;
    ArrayList<JVariableDeclarator> variableDeclarators = null;
    JMember memberDecl = null;
    try {
      if (jj_2_2(2147483647)) {
        jj_consume_token(IDENTIFIER);
line = token.beginLine;
            name = token.image;
        params = formalParameters();
        body = block();
memberDecl = new JConstructorDeclaration(line, mods, name, params, null, body);
      } else if (jj_2_3(2147483647)) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case VOID:{
          jj_consume_token(VOID);
type = Type.VOID;
          break;
          }
        case BOOLEAN:
        case CHAR:
        case INT:
        case DOUBLE:
        case LONG:
        case IDENTIFIER:{
          type = type();
          break;
          }
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
line = token.beginLine;
        jj_consume_token(IDENTIFIER);
name = token.image;
        params = formalParameters();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LCURLY:{
          body = block();
          break;
          }
        case SEMI:{
          jj_consume_token(SEMI);
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
memberDecl = new JMethodDeclaration(line, mods, name, type, params, null, body);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BOOLEAN:
        case CHAR:
        case INT:
        case DOUBLE:
        case LONG:
        case IDENTIFIER:{
          type = type();
line = token.beginLine;
          variableDeclarators = variableDeclarators(type);
memberDecl = new JFieldDeclaration(line, mods, variableDeclarators);
          jj_consume_token(SEMI);
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return memberDecl;}
    throw new Error("Missing return statement in function");
}

  final private JBlock block() throws ParseException {int line = 0;
    JStatement aStatement = null;
    ArrayList<JStatement> statements = new ArrayList<>();
    try {
      jj_consume_token(LCURLY);
line = token.beginLine;
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BOOLEAN:
        case CHAR:
        case FALSE:
        case IF:
        case INT:
        case NEW:
        case NULL:
        case RETURN:
        case SUPER:
        case THIS:
        case TRUE:
        case WHILE:
        case BREAK:
        case CONTINUE:
        case DO:
        case DOUBLE:
        case FOR:
        case LONG:
        case SWITCH:
        case LCURLY:
        case LPAREN:
        case SEMI:
        case DEC:
        case INC:
        case LNOT:
        case MINUS:
        case PLUS:
        case IDENTIFIER:
        case INT_LITERAL:
        case CHAR_LITERAL:
        case STRING_LITERAL:
        case LONG_LITERAL:
        case DOUBLE_LITERAL:{
          ;
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          break label_6;
        }
        aStatement = blockStatement();
statements.add(aStatement);
      }
      jj_consume_token(RCURLY);
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return new JBlock(line, statements);}
    throw new Error("Missing return statement in function");
}

  final private JStatement blockStatement() throws ParseException {JStatement statement = null;
    try {
      if (jj_2_4(2147483647)) {
        statement = localVariableDeclarationStatement();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case FALSE:
        case IF:
        case NEW:
        case NULL:
        case RETURN:
        case SUPER:
        case THIS:
        case TRUE:
        case WHILE:
        case BREAK:
        case CONTINUE:
        case DO:
        case FOR:
        case SWITCH:
        case LCURLY:
        case LPAREN:
        case SEMI:
        case DEC:
        case INC:
        case LNOT:
        case MINUS:
        case PLUS:
        case IDENTIFIER:
        case INT_LITERAL:
        case CHAR_LITERAL:
        case STRING_LITERAL:
        case LONG_LITERAL:
        case DOUBLE_LITERAL:{
          statement = statement();
          break;
          }
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return statement;}
    throw new Error("Missing return statement in function");
}

  final private ArrayList<JStatement> forInit(int line) throws ParseException {ArrayList<JStatement> statements = new ArrayList<JStatement>();
    Type type = null;
    ArrayList<JVariableDeclarator> declarators = null;
    JStatement aStatement = null;
    try {
      if (jj_2_5(2147483647)) {
        type = type();
        declarators = variableDeclarators(type);
statements.add(new JVariableDeclaration(line, declarators));
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case FALSE:
        case NEW:
        case NULL:
        case SUPER:
        case THIS:
        case TRUE:
        case LPAREN:
        case DEC:
        case INC:
        case LNOT:
        case MINUS:
        case PLUS:
        case IDENTIFIER:
        case INT_LITERAL:
        case CHAR_LITERAL:
        case STRING_LITERAL:
        case LONG_LITERAL:
        case DOUBLE_LITERAL:{
          aStatement = statementExpression();
statements.add(aStatement);
          label_7:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case COMMA:{
              ;
              break;
              }
            default:
              jj_la1[12] = jj_gen;
              break label_7;
            }
            jj_consume_token(COMMA);
            aStatement = statementExpression();
statements.add(aStatement);
          }
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return statements;}
    throw new Error("Missing return statement in function");
}

  final private ArrayList<JStatement> forUpdate(int line) throws ParseException {ArrayList<JStatement> statements = new ArrayList<JStatement>();
    JStatement aStatement = null;
    try {
      aStatement = statementExpression();
statements.add(aStatement);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[14] = jj_gen;
          break label_8;
        }
        jj_consume_token(COMMA);
        aStatement = statementExpression();
statements.add(aStatement);
      }
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return statements;}
    throw new Error("Missing return statement in function");
}

  final private SwitchStatementGroup switchBlockStatementGroup() throws ParseException {ArrayList<JExpression> labels = new ArrayList<>();
    ArrayList<JStatement> statements = new ArrayList<>();
    JExpression label = null;
    JStatement stmt = null;
    try {
      // Parse at least one label
              label = switchLabel();
labels.add(label);
      label_9:
      while (true) {
        if (jj_2_6(2)) {
          ;
        } else {
          break label_9;
        }
        label = switchLabel();
labels.add(label);
      }
      label_10:
      while (true) {
        if (jj_2_7(2)) {
          ;
        } else {
          break label_10;
        }
        stmt = blockStatement();
statements.add(stmt);
      }
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return new SwitchStatementGroup(labels, statements);}
    throw new Error("Missing return statement in function");
}

  final private JExpression switchLabel() throws ParseException {JExpression expr = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CASE:{
        jj_consume_token(CASE);
        expr = expression();
        jj_consume_token(COLON);
{if ("" != null) return expr;}
        break;
        }
      case DEFT:{
        jj_consume_token(DEFT);
        jj_consume_token(COLON);
{if ("" != null) return null;}
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
        {if ("" != null) return null;}
    }
    throw new Error("Missing return statement in function");
}

  final private JStatement statement() throws ParseException {int line = 0;
    JExpression expr      = null;
    JStatement statement  = null;
    JStatement consequent = null;
    JStatement alternate  = null;
    JStatement body       = null;

    ArrayList<JStatement> forInit = null;
    ArrayList<JStatement> forUpdate = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LCURLY:{
        statement = block();
        break;
        }
      case IF:{
        jj_consume_token(IF);
line = token.beginLine;
        expr = parExpression();
        consequent = statement();
        if (jj_2_8(2147483647)) {
          jj_consume_token(ELSE);
          alternate = statement();
        } else {
          ;
        }
statement = new JIfStatement(line, expr, consequent, alternate);
        break;
        }
      case RETURN:{
        jj_consume_token(RETURN);
line = token.beginLine;
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case FALSE:
        case NEW:
        case NULL:
        case SUPER:
        case THIS:
        case TRUE:
        case LPAREN:
        case DEC:
        case INC:
        case LNOT:
        case MINUS:
        case PLUS:
        case IDENTIFIER:
        case INT_LITERAL:
        case CHAR_LITERAL:
        case STRING_LITERAL:
        case LONG_LITERAL:
        case DOUBLE_LITERAL:{
          expr = expression();
          break;
          }
        default:
          jj_la1[16] = jj_gen;
          ;
        }
        jj_consume_token(SEMI);
statement = new JReturnStatement(line, expr);
        break;
        }
      case SEMI:{
        jj_consume_token(SEMI);
line = token.beginLine;
            statement = new JEmptyStatement( line );
        break;
        }
      case WHILE:{
        jj_consume_token(WHILE);
line = token.beginLine;
        expr = parExpression();
        body = statement();
statement = new JWhileStatement(line, expr, body);
        break;
        }
      case DO:{
        jj_consume_token(DO);
line = token.beginLine;
        body = statement();
        jj_consume_token(WHILE);
        expr = parExpression();
        jj_consume_token(SEMI);
statement = new JDoStatement(line, body, expr);
        break;
        }
      case FOR:{
        jj_consume_token(FOR);
line = token.beginLine;
        jj_consume_token(LPAREN);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BOOLEAN:
        case CHAR:
        case FALSE:
        case INT:
        case NEW:
        case NULL:
        case SUPER:
        case THIS:
        case TRUE:
        case DOUBLE:
        case LONG:
        case LPAREN:
        case DEC:
        case INC:
        case LNOT:
        case MINUS:
        case PLUS:
        case IDENTIFIER:
        case INT_LITERAL:
        case CHAR_LITERAL:
        case STRING_LITERAL:
        case LONG_LITERAL:
        case DOUBLE_LITERAL:{
          forInit = forInit(line);
          break;
          }
        default:
          jj_la1[17] = jj_gen;
          ;
        }
        jj_consume_token(SEMI);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case FALSE:
        case NEW:
        case NULL:
        case SUPER:
        case THIS:
        case TRUE:
        case LPAREN:
        case DEC:
        case INC:
        case LNOT:
        case MINUS:
        case PLUS:
        case IDENTIFIER:
        case INT_LITERAL:
        case CHAR_LITERAL:
        case STRING_LITERAL:
        case LONG_LITERAL:
        case DOUBLE_LITERAL:{
          expr = expression();
          break;
          }
        default:
          jj_la1[18] = jj_gen;
          ;
        }
        jj_consume_token(SEMI);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case FALSE:
        case NEW:
        case NULL:
        case SUPER:
        case THIS:
        case TRUE:
        case LPAREN:
        case DEC:
        case INC:
        case LNOT:
        case MINUS:
        case PLUS:
        case IDENTIFIER:
        case INT_LITERAL:
        case CHAR_LITERAL:
        case STRING_LITERAL:
        case LONG_LITERAL:
        case DOUBLE_LITERAL:{
          forUpdate = forUpdate(line);
          break;
          }
        default:
          jj_la1[19] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
        body = statement();
statement = new JForStatement(line, forInit, expr, forUpdate, body);
        break;
        }
      case BREAK:{
        jj_consume_token(BREAK);
line = token.beginLine;
        jj_consume_token(SEMI);
statement = new JBreakStatement(line);
        break;
        }
      case CONTINUE:{
        jj_consume_token(CONTINUE);
line = token.beginLine;
        jj_consume_token(SEMI);
statement = new JContinueStatement(line);
        break;
        }
      case SWITCH:{
        jj_consume_token(SWITCH);
line = token.beginLine;
        expr = parExpression();
        jj_consume_token(LCURLY);
ArrayList<SwitchStatementGroup> switchBlockStatementGroups = new ArrayList<>();
            SwitchStatementGroup group = null;
        label_11:
        while (true) {
          if (jj_2_9(2)) {
            ;
          } else {
            break label_11;
          }
          group = switchBlockStatementGroup();
switchBlockStatementGroups.add(group);
        }
        jj_consume_token(RCURLY);
statement = new JSwitchStatement(line, expr, switchBlockStatementGroups);
        break;
        }
      case FALSE:
      case NEW:
      case NULL:
      case SUPER:
      case THIS:
      case TRUE:
      case LPAREN:
      case DEC:
      case INC:
      case LNOT:
      case MINUS:
      case PLUS:
      case IDENTIFIER:
      case INT_LITERAL:
      case CHAR_LITERAL:
      case STRING_LITERAL:
      case LONG_LITERAL:
      case DOUBLE_LITERAL:{
        // Must be a statementExpression.
                statement = statementExpression();
        jj_consume_token(SEMI);
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return statement;}
    throw new Error("Missing return statement in function");
}

  final private ArrayList<JFormalParameter> formalParameters() throws ParseException {ArrayList<JFormalParameter> parameters = new ArrayList<>();
    JFormalParameter aParameter = null;
    try {
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BOOLEAN:
      case CHAR:
      case INT:
      case DOUBLE:
      case LONG:
      case IDENTIFIER:{
        aParameter = formalParameter();
parameters.add(aParameter);
        label_12:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[21] = jj_gen;
            break label_12;
          }
          jj_consume_token(COMMA);
          aParameter = formalParameter();
parameters.add(aParameter);
        }
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return parameters;}
    throw new Error("Missing return statement in function");
}

  final private JFormalParameter formalParameter() throws ParseException {int line = 0;
    Type type = null;
    String name = "";
    try {
      type = type();
line = token.beginLine;
      jj_consume_token(IDENTIFIER);
name = token.image;
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return new JFormalParameter(line, name, type);}
    throw new Error("Missing return statement in function");
}

  final private JExpression parExpression() throws ParseException {JExpression expr = null;
    try {
      jj_consume_token(LPAREN);
      expr = expression();
      jj_consume_token(RPAREN);
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return expr;}
    throw new Error("Missing return statement in function");
}

  final private JVariableDeclaration localVariableDeclarationStatement() throws ParseException {int line = 0;
    Type type = null;
    ArrayList<JVariableDeclarator> vdecls = null;
    try {
      type = type();
line = token.beginLine;
      vdecls = variableDeclarators(type);
      jj_consume_token(SEMI);
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return new JVariableDeclaration(line, vdecls);}
    throw new Error("Missing return statement in function");
}

  final private ArrayList<JVariableDeclarator> variableDeclarators(Type type) throws ParseException {JVariableDeclarator aVariableDeclarator = null;
    ArrayList<JVariableDeclarator> variableDeclarators = new ArrayList<>();
    try {
      aVariableDeclarator = variableDeclarator(type);
variableDeclarators.add(aVariableDeclarator);
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[23] = jj_gen;
          break label_13;
        }
        jj_consume_token(COMMA);
        aVariableDeclarator = variableDeclarator(type);
variableDeclarators.add(aVariableDeclarator);
      }
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return variableDeclarators;}
    throw new Error("Missing return statement in function");
}

  final private JVariableDeclarator variableDeclarator(Type type) throws ParseException {int line = 0;
    JExpression initial = null;
    String name = "";
    try {
      jj_consume_token(IDENTIFIER);
line = token.beginLine;
            name = token.image;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASSIGN:{
        jj_consume_token(ASSIGN);
        initial = variableInitializer(type);
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        ;
      }
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return new JVariableDeclarator(line, name, type, initial);}
    throw new Error("Missing return statement in function");
}

  final private JExpression variableInitializer(Type type) throws ParseException {JExpression initializer = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LCURLY:{
        initializer = arrayInitializer(type);
        break;
        }
      case FALSE:
      case NEW:
      case NULL:
      case SUPER:
      case THIS:
      case TRUE:
      case LPAREN:
      case DEC:
      case INC:
      case LNOT:
      case MINUS:
      case PLUS:
      case IDENTIFIER:
      case INT_LITERAL:
      case CHAR_LITERAL:
      case STRING_LITERAL:
      case LONG_LITERAL:
      case DOUBLE_LITERAL:{
        initializer = expression();
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return initializer;}
    throw new Error("Missing return statement in function");
}

  final private JArrayInitializer arrayInitializer(Type type) throws ParseException {int line = 0;
    ArrayList<JExpression> initials = new ArrayList<>();
    JExpression anInitializer = null;
    try {
      jj_consume_token(LCURLY);
line = token.beginLine;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FALSE:
      case NEW:
      case NULL:
      case SUPER:
      case THIS:
      case TRUE:
      case LCURLY:
      case LPAREN:
      case DEC:
      case INC:
      case LNOT:
      case MINUS:
      case PLUS:
      case IDENTIFIER:
      case INT_LITERAL:
      case CHAR_LITERAL:
      case STRING_LITERAL:
      case LONG_LITERAL:
      case DOUBLE_LITERAL:{
        anInitializer = variableInitializer(type.componentType());
initials.add(anInitializer);
        label_14:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[26] = jj_gen;
            break label_14;
          }
          jj_consume_token(COMMA);
          anInitializer = variableInitializer(type.componentType());
initials.add(anInitializer);
        }
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        ;
      }
      jj_consume_token(RCURLY);
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return new JArrayInitializer(line, type, initials);}
    throw new Error("Missing return statement in function");
}

  final private ArrayList<JExpression> arguments() throws ParseException {ArrayList<JExpression> args = new ArrayList<>();
    JExpression anExpression = null;
    try {
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FALSE:
      case NEW:
      case NULL:
      case SUPER:
      case THIS:
      case TRUE:
      case LPAREN:
      case DEC:
      case INC:
      case LNOT:
      case MINUS:
      case PLUS:
      case IDENTIFIER:
      case INT_LITERAL:
      case CHAR_LITERAL:
      case STRING_LITERAL:
      case LONG_LITERAL:
      case DOUBLE_LITERAL:{
        anExpression = expression();
args.add(anExpression);
        label_15:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[28] = jj_gen;
            break label_15;
          }
          jj_consume_token(COMMA);
          anExpression = expression();
args.add(anExpression);
        }
        break;
        }
      default:
        jj_la1[29] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return args;}
    throw new Error("Missing return statement in function");
}

  final private Type type() throws ParseException {Type type = null;
    try {
      if (jj_2_10(2147483647)) {
        type = referenceType();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BOOLEAN:
        case CHAR:
        case INT:
        case DOUBLE:
        case LONG:{
          type = basicType();
          break;
          }
        default:
          jj_la1[30] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return type;}
    throw new Error("Missing return statement in function");
}

  final private Type basicType() throws ParseException {Type type = Type.ANY;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BOOLEAN:{
        jj_consume_token(BOOLEAN);
type = Type.BOOLEAN;
        break;
        }
      case CHAR:{
        jj_consume_token(CHAR);
type = Type.CHAR;
        break;
        }
      case INT:{
        jj_consume_token(INT);
type = Type.INT;
        break;
        }
      case LONG:{
        jj_consume_token(LONG);
type = Type.LONG;
        break;
        }
      case DOUBLE:{
        jj_consume_token(DOUBLE);
type = Type.DOUBLE;
        break;
        }
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
if (type == Type.ANY) {
            reportParserError("type sought where %s found", token.image);
        }
        {if ("" != null) return type;}
    throw new Error("Missing return statement in function");
}

  final private Type referenceType() throws ParseException {Type type = Type.ANY;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BOOLEAN:
      case CHAR:
      case INT:
      case DOUBLE:
      case LONG:{
        type = basicType();
        jj_consume_token(LBRACK);
        jj_consume_token(RBRACK);
type = new ArrayTypeName(type);
        label_16:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case LBRACK:{
            ;
            break;
            }
          default:
            jj_la1[32] = jj_gen;
            break label_16;
          }
          jj_consume_token(LBRACK);
          jj_consume_token(RBRACK);
type = new ArrayTypeName(type);
        }
        break;
        }
      case IDENTIFIER:{
        type = qualifiedIdentifier();
        label_17:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case LBRACK:{
            ;
            break;
            }
          default:
            jj_la1[33] = jj_gen;
            break label_17;
          }
          jj_consume_token(LBRACK);
          jj_consume_token(RBRACK);
type = new ArrayTypeName(type);
        }
        break;
        }
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return type;}
    throw new Error("Missing return statement in function");
}

  final private JStatement statementExpression() throws ParseException {int line = 0;
    JExpression expr = null;
    try {
      expr = expression();
line = expr.line();
            if (expr instanceof JAssignment
             || expr instanceof JPreIncrementOp
             || expr instanceof JPostIncrementOp
             || expr instanceof JPreDecrementOp
             || expr instanceof JPostDecrementOp
             || expr instanceof JMessageExpression
             || expr instanceof JSuperConstruction
             || expr instanceof JThisConstruction
             || expr instanceof JNewOp
             || expr instanceof JNewArrayOp) {
                // So as not to save on stack.
                expr.isStatementExpression = true;
            } else {
                reportParserError("invalid statement expression; it does not have a side-effect");
            }
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return new JStatementExpression( line, expr );}
    throw new Error("Missing return statement in function");
}

  final private JExpression expression() throws ParseException {JExpression expr = null;
    try {
      expr = assignmentExpression();
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return expr;}
    throw new Error("Missing return statement in function");
}

  final private JExpression assignmentExpression() throws ParseException {int line = 0;
    JExpression lhs = null, rhs = null;
    try {
      lhs = conditionalExpression();
line = lhs.line();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASSIGN:
      case PLUS_ASSIGN:
      case MINUS_ASSIGN:
      case STAR_ASSIGN:
      case DIV_ASSIGN:
      case REM_ASSIGN:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ASSIGN:{
          jj_consume_token(ASSIGN);
          rhs = assignmentExpression();
lhs = new JAssignOp(line, lhs, rhs);
          break;
          }
        case PLUS_ASSIGN:{
          jj_consume_token(PLUS_ASSIGN);
          rhs = assignmentExpression();
lhs = new JPlusAssignOp(line, lhs, rhs);
          break;
          }
        case MINUS_ASSIGN:{
          jj_consume_token(MINUS_ASSIGN);
          rhs = assignmentExpression();
lhs = new JMinusAssignOp(line, lhs, rhs);
          break;
          }
        case STAR_ASSIGN:{
          jj_consume_token(STAR_ASSIGN);
          rhs = assignmentExpression();
lhs = new JStarAssignOp(line, lhs, rhs);
          break;
          }
        case DIV_ASSIGN:{
          jj_consume_token(DIV_ASSIGN);
          rhs = assignmentExpression();
lhs = new JDivAssignOp(line, lhs, rhs);
          break;
          }
        case REM_ASSIGN:{
          jj_consume_token(REM_ASSIGN);
          rhs = assignmentExpression();
lhs = new JRemAssignOp(line, lhs, rhs);
          break;
          }
        default:
          jj_la1[35] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[36] = jj_gen;
        ;
      }
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return lhs;}
    throw new Error("Missing return statement in function");
}

  final private JExpression conditionalExpression() throws ParseException {int line = 0;
    JExpression lhs = null;
    JExpression condition = null;
    JExpression trueBranch = null;
    JExpression falseBranch = null;
    try {
      lhs = conditionalOrExpression();
line = lhs.line();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case QUESTION:{
        jj_consume_token(QUESTION);
        trueBranch = expression();
        jj_consume_token(COLON);
        falseBranch = conditionalExpression();
lhs = new JConditionalExpression(line, lhs, trueBranch, falseBranch);
        break;
        }
      default:
        jj_la1[37] = jj_gen;
        ;
      }
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return lhs;}
    throw new Error("Missing return statement in function");
}

  final private JExpression conditionalOrExpression() throws ParseException {int line = 0;
    JExpression lhs = null, rhs = null;
    try {
      lhs = conditionalAndExpression();
line = lhs.line();
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LOR:{
          ;
          break;
          }
        default:
          jj_la1[38] = jj_gen;
          break label_18;
        }
        jj_consume_token(LOR);
        rhs = conditionalAndExpression();
lhs = new JLogicalOrOp(line, lhs, rhs);
      }
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return lhs;}
    throw new Error("Missing return statement in function");
}

  final private JExpression conditionalAndExpression() throws ParseException {int line = 0;
    JExpression lhs = null, rhs = null;
    try {
      lhs = equalityExpression();
line = lhs.line();
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LAND:{
          ;
          break;
          }
        default:
          jj_la1[39] = jj_gen;
          break label_19;
        }
        jj_consume_token(LAND);
        rhs = equalityExpression();
lhs = new JLogicalAndOp(line, lhs, rhs);
      }
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return lhs;}
    throw new Error("Missing return statement in function");
}

  final private JExpression equalityExpression() throws ParseException {int line = 0;
    JExpression lhs = null, rhs = null;
    try {
      lhs = relationalExpression();
line = lhs.line();
      label_20:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EQUAL:
        case NOT_EQUAL:{
          ;
          break;
          }
        default:
          jj_la1[40] = jj_gen;
          break label_20;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EQUAL:{
          jj_consume_token(EQUAL);
          rhs = relationalExpression();
lhs = new JEqualOp(line, lhs, rhs);
          break;
          }
        case NOT_EQUAL:{
          jj_consume_token(NOT_EQUAL);
          rhs = relationalExpression();
lhs = new JNotEqualOp(line, lhs, rhs);
          break;
          }
        default:
          jj_la1[41] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return lhs;}
    throw new Error("Missing return statement in function");
}

  final private JExpression relationalExpression() throws ParseException {int line = 0;
    JExpression lhs = null, rhs = null;
    Type type = null;
    try {
      lhs = additiveExpression();
line = lhs.line();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INSTANCEOF:
      case GT:
      case LE:
      case GE:
      case LT:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case GT:{
          jj_consume_token(GT);
          rhs = additiveExpression();
lhs = new JGreaterThanOp(line, lhs, rhs);
          break;
          }
        case LE:{
          jj_consume_token(LE);
          rhs = additiveExpression();
lhs = new JLessEqualOp(line, lhs, rhs);
          break;
          }
        case INSTANCEOF:{
          jj_consume_token(INSTANCEOF);
          type = referenceType();
lhs = new JInstanceOfOp(line, lhs, type);
          break;
          }
        case GE:{
          jj_consume_token(GE);
          rhs = additiveExpression();
lhs = new JGreaterEqualOp(line, lhs, rhs);
          break;
          }
        case LT:{
          jj_consume_token(LT);
          rhs = additiveExpression();
lhs = new JLessThanOp(line, lhs, rhs);
          break;
          }
        default:
          jj_la1[42] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[43] = jj_gen;
        ;
      }
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return lhs;}
    throw new Error("Missing return statement in function");
}

  final private JExpression additiveExpression() throws ParseException {int line = 0;
    JExpression lhs = null, rhs = null;
    try {
      lhs = multiplicativeExpression();
line = lhs.line();
      label_21:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MINUS:
        case PLUS:{
          ;
          break;
          }
        default:
          jj_la1[44] = jj_gen;
          break label_21;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MINUS:{
          jj_consume_token(MINUS);
          rhs = multiplicativeExpression();
lhs = new JSubtractOp(line, lhs, rhs);
          break;
          }
        case PLUS:{
          jj_consume_token(PLUS);
          rhs = multiplicativeExpression();
lhs = new JPlusOp(line, lhs, rhs);
          break;
          }
        default:
          jj_la1[45] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return lhs;}
    throw new Error("Missing return statement in function");
}

  final private JExpression multiplicativeExpression() throws ParseException {int line = 0;
    JExpression lhs = null, rhs = null;
    try {
      lhs = unaryExpression();
line = lhs.line();
      label_22:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STAR:
        case DIV:
        case REM:{
          ;
          break;
          }
        default:
          jj_la1[46] = jj_gen;
          break label_22;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STAR:{
          jj_consume_token(STAR);
          rhs = unaryExpression();
lhs = new JMultiplyOp(line, lhs, rhs);
          break;
          }
        case DIV:{
          jj_consume_token(DIV);
          rhs = unaryExpression();
lhs = new JDivideOp(line, lhs, rhs);
          break;
          }
        case REM:{
          jj_consume_token(REM);
          rhs = unaryExpression();
lhs = new JRemainderOp(line, lhs, rhs);
          break;
          }
        default:
          jj_la1[47] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return lhs;}
    throw new Error("Missing return statement in function");
}

  final private JExpression unaryExpression() throws ParseException {int line = 0;
    JExpression expr = null, unaryExpr = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INC:{
        jj_consume_token(INC);
line = token.beginLine;
        unaryExpr = unaryExpression();
expr = new JPreIncrementOp(line, unaryExpr);
        break;
        }
      case DEC:{
        jj_consume_token(DEC);
line = token.beginLine;
        unaryExpr = unaryExpression();
expr = new JPreDecrementOp(line, unaryExpr);
        break;
        }
      case MINUS:{
        jj_consume_token(MINUS);
line = token.beginLine;
        unaryExpr = unaryExpression();
expr = new JNegateOp(line, unaryExpr);
        break;
        }
      case PLUS:{
        jj_consume_token(PLUS);
line = token.beginLine;
        unaryExpr = unaryExpression();
expr = new JUnaryPlusOp(line, unaryExpr);
        break;
        }
      case FALSE:
      case NEW:
      case NULL:
      case SUPER:
      case THIS:
      case TRUE:
      case LPAREN:
      case LNOT:
      case IDENTIFIER:
      case INT_LITERAL:
      case CHAR_LITERAL:
      case STRING_LITERAL:
      case LONG_LITERAL:
      case DOUBLE_LITERAL:{
        expr = simpleUnaryExpression();
        break;
        }
      default:
        jj_la1[48] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return expr;}
    throw new Error("Missing return statement in function");
}

  final private JExpression simpleUnaryExpression() throws ParseException {int line = 0;
    Type type = null;
    JExpression expr = null, unaryExpr = null, simpleUnaryExpr = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LNOT:{
        jj_consume_token(LNOT);
line = token.beginLine;
        unaryExpr = unaryExpression();
expr = new JLogicalNotOp(line, unaryExpr);
        break;
        }
      default:
        jj_la1[49] = jj_gen;
        if (jj_2_11(2147483647)) {
          jj_consume_token(LPAREN);
line = token.beginLine;
          type = basicType();
          jj_consume_token(RPAREN);
          unaryExpr = unaryExpression();
expr = new JCastOp(line, type, unaryExpr);
        } else if (jj_2_12(2147483647)) {
          jj_consume_token(LPAREN);
line = token.beginLine;
          type = referenceType();
          jj_consume_token(RPAREN);
          simpleUnaryExpr = simpleUnaryExpression();
expr = new JCastOp(line, type, simpleUnaryExpr);
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case FALSE:
          case NEW:
          case NULL:
          case SUPER:
          case THIS:
          case TRUE:
          case LPAREN:
          case IDENTIFIER:
          case INT_LITERAL:
          case CHAR_LITERAL:
          case STRING_LITERAL:
          case LONG_LITERAL:
          case DOUBLE_LITERAL:{
            expr = postfixExpression();
            break;
            }
          default:
            jj_la1[50] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return expr ;}
    throw new Error("Missing return statement in function");
}

  final private JExpression postfixExpression() throws ParseException {int line = 0;
    JExpression primaryExpr = null;
    try {
      primaryExpr = primary();
line = primaryExpr.line();
      label_23:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DOT:
        case LBRACK:{
          ;
          break;
          }
        default:
          jj_la1[51] = jj_gen;
          break label_23;
        }
        primaryExpr = selector(primaryExpr);
      }
      label_24:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DEC:
        case INC:{
          ;
          break;
          }
        default:
          jj_la1[52] = jj_gen;
          break label_24;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DEC:{
          jj_consume_token(DEC);
primaryExpr = new JPostDecrementOp(line, primaryExpr);
          break;
          }
        case INC:{
          jj_consume_token(INC);
primaryExpr = new JPostIncrementOp(line, primaryExpr);
          break;
          }
        default:
          jj_la1[53] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return primaryExpr;}
    throw new Error("Missing return statement in function");
}

  final private JExpression selector(JExpression target) throws ParseException {int line = 0;
    ArrayList<JExpression> args = null;
    TypeName id = null;
    JExpression expr = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DOT:{
        jj_consume_token(DOT);
line = token.beginLine;
        id = qualifiedIdentifier();
expr = new JFieldSelection(line, ambiguousPart(id), target, id.simpleName());
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LPAREN:{
          args = arguments();
expr = new JMessageExpression(line, target, ambiguousPart(id), id.simpleName(), args);
          break;
          }
        default:
          jj_la1[54] = jj_gen;
          ;
        }
        break;
        }
      case LBRACK:{
        jj_consume_token(LBRACK);
line = token.beginLine;
expr = new JArrayExpression(line, target, expression());
        jj_consume_token(RBRACK);
        break;
        }
      default:
        jj_la1[55] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return expr;}
    throw new Error("Missing return statement in function");
}

  final private JExpression primary() throws ParseException {int line = 0;
    String name = "";
    JExpression expr = null;
    JExpression newTarget = null;
    ArrayList<JExpression> args = null;
    TypeName id = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAREN:{
        expr = parExpression();
        break;
        }
      case NEW:{
        jj_consume_token(NEW);
        expr = creator();
        break;
        }
      case THIS:{
        jj_consume_token(THIS);
line = token.beginLine;
            expr = new JThis(line);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LPAREN:{
          args = arguments();
expr = new JThisConstruction(line, args);
          break;
          }
        default:
          jj_la1[56] = jj_gen;
          ;
        }
        break;
        }
      case SUPER:{
        jj_consume_token(SUPER);
line = token.beginLine;
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LPAREN:{
          args = arguments();
expr = new JSuperConstruction(line, args);
          break;
          }
        case DOT:{
          jj_consume_token(DOT);
          jj_consume_token(IDENTIFIER);
name = token.image;
                newTarget = new JSuper(line);
                expr = new JFieldSelection(line, newTarget, name);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case LPAREN:{
            args = arguments();
expr = new JMessageExpression(line, newTarget, null, name, args);
            break;
            }
          default:
            jj_la1[57] = jj_gen;
            ;
          }
          break;
          }
        default:
          jj_la1[58] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case IDENTIFIER:{
        // Language is ambiguous here. JavaCC is unable to choose between qualifiedIdentifier and
                // selector. Semantic analysis will sort it out.
                id = qualifiedIdentifier();
line = id.line();
            if (ambiguousPart(id) == null) {
                expr = new JVariable(line, id.simpleName());
            } else {
                expr = new JFieldSelection(line, ambiguousPart(id), null, id.simpleName());
            }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LPAREN:{
          args = arguments();
expr = new JMessageExpression(line, null, ambiguousPart(id), id.simpleName(), args);
          break;
          }
        default:
          jj_la1[59] = jj_gen;
          ;
        }
        break;
        }
      case FALSE:
      case NULL:
      case TRUE:
      case INT_LITERAL:
      case CHAR_LITERAL:
      case STRING_LITERAL:
      case LONG_LITERAL:
      case DOUBLE_LITERAL:{
        expr = literal();
        break;
        }
      default:
        jj_la1[60] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return expr;}
    throw new Error("Missing return statement in function");
}

  final private JExpression creator() throws ParseException {int line = 0;
    Type type = null;
    ArrayList<JExpression> args = null;
    ArrayList<JExpression> dims = null;
    JArrayInitializer init =  null;
    JExpression expr = null;
    Type expected = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BOOLEAN:
      case CHAR:
      case INT:
      case DOUBLE:
      case LONG:{
        type = basicType();
        break;
        }
      case IDENTIFIER:{
        type = qualifiedIdentifier();
        break;
        }
      default:
        jj_la1[61] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
line = token.beginLine;
            expected = type;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAREN:{
        args = arguments();
expr = new JNewOp(line, type, args);
        break;
        }
      default:
        jj_la1[63] = jj_gen;
        if (jj_2_14(2147483647)) {
          jj_consume_token(LBRACK);
          jj_consume_token(RBRACK);
expected = new ArrayTypeName(expected);
          label_25:
          while (true) {
            if (jj_2_13(2147483647)) {
              ;
            } else {
              break label_25;
            }
            jj_consume_token(LBRACK);
            jj_consume_token(RBRACK);
expected = new ArrayTypeName(expected);
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case LCURLY:{
            expr = arrayInitializer(expected);
            break;
            }
          default:
            jj_la1[62] = jj_gen;
            ;
          }
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case LBRACK:{
            expr = newArrayDeclarator(type);
            break;
            }
          default:
            jj_la1[64] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (ParseException e) {
expr = new JWildExpression(token.beginLine);
        recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return expr;}
    throw new Error("Missing return statement in function");
}

  final private JNewArrayOp newArrayDeclarator(Type type) throws ParseException {int line = 0;
    ArrayList<JExpression> dimensions = new ArrayList<>();
    JExpression expr = null;
    try {
      jj_consume_token(LBRACK);
line = token.beginLine;
      expr = expression();
dimensions.add(expr);
            type = new ArrayTypeName(type);
      jj_consume_token(RBRACK);
      label_26:
      while (true) {
        if (jj_2_15(2147483647)) {
          ;
        } else {
          break label_26;
        }
        jj_consume_token(LBRACK);
        expr = expression();
dimensions.add(expr);
                type = new ArrayTypeName(type);
        jj_consume_token(RBRACK);
      }
      label_27:
      while (true) {
        if (jj_2_16(2147483647)) {
          ;
        } else {
          break label_27;
        }
        jj_consume_token(LBRACK);
        jj_consume_token(RBRACK);
type = new ArrayTypeName(type);
      }
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return new JNewArrayOp(line, type, dimensions);}
    throw new Error("Missing return statement in function");
}

  final private JExpression literal() throws ParseException {JExpression expr = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CHAR_LITERAL:{
        jj_consume_token(CHAR_LITERAL);
expr = new JLiteralChar(token.beginLine, token.image);
        break;
        }
      case FALSE:{
        jj_consume_token(FALSE);
expr = new JLiteralBoolean(token.beginLine, token.image);
        break;
        }
      case INT_LITERAL:{
        jj_consume_token(INT_LITERAL);
expr = new JLiteralInt(token.beginLine, token.image);
        break;
        }
      case LONG_LITERAL:{
        jj_consume_token(LONG_LITERAL);
expr = new JLiteralLong(token.beginLine, token.image);
        break;
        }
      case DOUBLE_LITERAL:{
        jj_consume_token(DOUBLE_LITERAL);
expr = new JLiteralDouble(token.beginLine, token.image);
        break;
        }
      case NULL:{
        jj_consume_token(NULL);
expr = new JLiteralNull(token.beginLine);
        break;
        }
      case STRING_LITERAL:{
        jj_consume_token(STRING_LITERAL);
expr = new JLiteralString(token.beginLine, token.image);
        break;
        }
      case TRUE:{
        jj_consume_token(TRUE);
expr = new JLiteralBoolean(token.beginLine, token.image);
        break;
        }
      default:
        jj_la1[65] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
expr = new JWildExpression(token.beginLine);
        recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return expr;}
    throw new Error("Missing return statement in function");
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_6()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_7()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_8()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_9()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_10()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_11()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_12()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_13()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_14()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_15()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_16()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_3R_statement_756_9_59()
 {
    if (jj_3R_block_547_5_80()) return true;
    return false;
  }

  private boolean jj_3R_type_1137_9_38()
 {
    if (jj_3R_basicType_1158_5_34()) return true;
    return false;
  }

  private boolean jj_3R_literal_1907_5_137()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_literal_1908_9_147()) {
    jj_scanpos = xsp;
    if (jj_3R_literal_1910_9_148()) {
    jj_scanpos = xsp;
    if (jj_3R_literal_1912_9_149()) {
    jj_scanpos = xsp;
    if (jj_3R_literal_1914_9_150()) {
    jj_scanpos = xsp;
    if (jj_3R_literal_1916_9_151()) {
    jj_scanpos = xsp;
    if (jj_3R_literal_1918_9_152()) {
    jj_scanpos = xsp;
    if (jj_3R_literal_1920_9_153()) {
    jj_scanpos = xsp;
    if (jj_3R_literal_1922_9_154()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_type_1135_9_37()
 {
    if (jj_3R_referenceType_1195_5_35()) return true;
    return false;
  }

  private boolean jj_3R_statement_755_5_52()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_statement_756_9_59()) {
    jj_scanpos = xsp;
    if (jj_3R_statement_757_9_60()) {
    jj_scanpos = xsp;
    if (jj_3R_statement_769_9_61()) {
    jj_scanpos = xsp;
    if (jj_3R_statement_776_9_62()) {
    jj_scanpos = xsp;
    if (jj_3R_statement_781_9_63()) {
    jj_scanpos = xsp;
    if (jj_3R_statement_786_9_64()) {
    jj_scanpos = xsp;
    if (jj_3R_statement_794_9_65()) {
    jj_scanpos = xsp;
    if (jj_3R_statement_815_9_66()) {
    jj_scanpos = xsp;
    if (jj_3R_statement_819_9_67()) {
    jj_scanpos = xsp;
    if (jj_3R_statement_826_9_68()) {
    jj_scanpos = xsp;
    if (jj_3R_statement_843_9_69()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_additiveExpression_1511_13_105()
 {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_multiplicativeExpression_1536_5_95()) return true;
    return false;
  }

  private boolean jj_3_16()
 {
    if (jj_scan_token(LBRACK)) return true;
    if (jj_scan_token(RBRACK)) return true;
    return false;
  }

  private boolean jj_3R_type_1134_5_29()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_type_1135_9_37()) {
    jj_scanpos = xsp;
    if (jj_3R_type_1137_9_38()) return true;
    }
    return false;
  }

  private boolean jj_3R_additiveExpression_1508_13_96()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_additiveExpression_1508_13_104()) {
    jj_scanpos = xsp;
    if (jj_3R_additiveExpression_1511_13_105()) return true;
    }
    return false;
  }

  private boolean jj_3R_additiveExpression_1508_13_104()
 {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_multiplicativeExpression_1536_5_95()) return true;
    return false;
  }

  private boolean jj_3R_newArrayDeclarator_1883_13_162()
 {
    if (jj_scan_token(LBRACK)) return true;
    if (jj_scan_token(RBRACK)) return true;
    return false;
  }

  private boolean jj_3_15()
 {
    if (jj_scan_token(LBRACK)) return true;
    if (jj_3R_expression_1269_5_36()) return true;
    if (jj_scan_token(RBRACK)) return true;
    return false;
  }

  private boolean jj_3R_additiveExpression_1504_5_91()
 {
    if (jj_3R_multiplicativeExpression_1536_5_95()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_additiveExpression_1508_13_96()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_arguments_1108_17_163()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_expression_1269_5_36()) return true;
    return false;
  }

  private boolean jj_3R_newArrayDeclarator_1873_13_161()
 {
    if (jj_scan_token(LBRACK)) return true;
    if (jj_3R_expression_1269_5_36()) return true;
    if (jj_scan_token(RBRACK)) return true;
    return false;
  }

  private boolean jj_3R_arguments_1105_13_159()
 {
    if (jj_3R_expression_1269_5_36()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_arguments_1108_17_163()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_switchLabel_717_9_40()
 {
    if (jj_scan_token(DEFT)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_relationalExpression_1479_13_101()
 {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_additiveExpression_1504_5_91()) return true;
    return false;
  }

  private boolean jj_3R_arguments_1102_5_145()
 {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_arguments_1105_13_159()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_relationalExpression_1476_13_100()
 {
    if (jj_scan_token(GE)) return true;
    if (jj_3R_additiveExpression_1504_5_91()) return true;
    return false;
  }

  private boolean jj_3R_switchLabel_713_9_39()
 {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_expression_1269_5_36()) return true;
    return false;
  }

  private boolean jj_3R_relationalExpression_1473_13_99()
 {
    if (jj_scan_token(INSTANCEOF)) return true;
    if (jj_3R_referenceType_1195_5_35()) return true;
    return false;
  }

  private boolean jj_3R_newArrayDeclarator_1863_5_158()
 {
    if (jj_scan_token(LBRACK)) return true;
    if (jj_3R_expression_1269_5_36()) return true;
    if (jj_scan_token(RBRACK)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_newArrayDeclarator_1873_13_161()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_newArrayDeclarator_1883_13_162()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_switchLabel_712_5_30()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_switchLabel_713_9_39()) {
    jj_scanpos = xsp;
    if (jj_3R_switchLabel_717_9_40()) return true;
    }
    return false;
  }

  private boolean jj_3R_relationalExpression_1470_13_98()
 {
    if (jj_scan_token(LE)) return true;
    if (jj_3R_additiveExpression_1504_5_91()) return true;
    return false;
  }

  private boolean jj_3R_relationalExpression_1467_13_92()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_relationalExpression_1467_13_97()) {
    jj_scanpos = xsp;
    if (jj_3R_relationalExpression_1470_13_98()) {
    jj_scanpos = xsp;
    if (jj_3R_relationalExpression_1473_13_99()) {
    jj_scanpos = xsp;
    if (jj_3R_relationalExpression_1476_13_100()) {
    jj_scanpos = xsp;
    if (jj_3R_relationalExpression_1479_13_101()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_relationalExpression_1467_13_97()
 {
    if (jj_scan_token(GT)) return true;
    if (jj_3R_additiveExpression_1504_5_91()) return true;
    return false;
  }

  private boolean jj_3R_arrayInitializer_1075_17_166()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_variableInitializer_1042_5_165()) return true;
    return false;
  }

  private boolean jj_3_13()
 {
    if (jj_scan_token(LBRACK)) return true;
    if (jj_scan_token(RBRACK)) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_relationalExpression_1464_5_89()
 {
    if (jj_3R_additiveExpression_1504_5_91()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_relationalExpression_1467_13_92()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_arrayInitializer_1072_13_164()
 {
    if (jj_3R_variableInitializer_1042_5_165()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_arrayInitializer_1075_17_166()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_creator_1834_16_157()
 {
    if (jj_3R_arrayInitializer_1068_5_160()) return true;
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_3R_blockStatement_576_5_31()) return true;
    return false;
  }

  private boolean jj_3R_creator_1836_13_144()
 {
    if (jj_3R_newArrayDeclarator_1863_5_158()) return true;
    return false;
  }

  private boolean jj_3_14()
 {
    if (jj_scan_token(LBRACK)) return true;
    if (jj_scan_token(RBRACK)) return true;
    return false;
  }

  private boolean jj_3R_creator_1829_17_156()
 {
    if (jj_scan_token(LBRACK)) return true;
    if (jj_scan_token(RBRACK)) return true;
    return false;
  }

  private boolean jj_3R_qualifiedIdentifier_297_13_70()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_3R_switchLabel_712_5_30()) return true;
    return false;
  }

  private boolean jj_3R_arrayInitializer_1068_5_160()
 {
    if (jj_scan_token(LCURLY)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_arrayInitializer_1072_13_164()) jj_scanpos = xsp;
    if (jj_scan_token(RCURLY)) return true;
    return false;
  }

  private boolean jj_3R_creator_1825_13_143()
 {
    if (jj_scan_token(LBRACK)) return true;
    if (jj_scan_token(RBRACK)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_creator_1829_17_156()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_creator_1834_16_157()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_creator_1823_13_142()
 {
    if (jj_3R_arguments_1102_5_145()) return true;
    return false;
  }

  private boolean jj_3R_equalityExpression_1437_13_94()
 {
    if (jj_scan_token(NOT_EQUAL)) return true;
    if (jj_3R_relationalExpression_1464_5_89()) return true;
    return false;
  }

  private boolean jj_3R_equalityExpression_1434_13_90()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_equalityExpression_1434_13_93()) {
    jj_scanpos = xsp;
    if (jj_3R_equalityExpression_1437_13_94()) return true;
    }
    return false;
  }

  private boolean jj_3R_equalityExpression_1434_13_93()
 {
    if (jj_scan_token(EQUAL)) return true;
    if (jj_3R_relationalExpression_1464_5_89()) return true;
    return false;
  }

  private boolean jj_3R_creator_1816_13_141()
 {
    if (jj_3R_qualifiedIdentifier_289_5_54()) return true;
    return false;
  }

  private boolean jj_3R_creator_1815_13_140()
 {
    if (jj_3R_basicType_1158_5_34()) return true;
    return false;
  }

  private boolean jj_3R_switchBlockStatementGroup_673_5_32()
 {
    if (jj_3R_switchLabel_712_5_30()) return true;
    return false;
  }

  private boolean jj_3R_qualifiedIdentifier_289_5_54()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_qualifiedIdentifier_297_13_70()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_variableInitializer_1044_9_168()
 {
    if (jj_3R_expression_1269_5_36()) return true;
    return false;
  }

  private boolean jj_3R_variableInitializer_1043_9_167()
 {
    if (jj_3R_arrayInitializer_1068_5_160()) return true;
    return false;
  }

  private boolean jj_3R_equalityExpression_1430_5_87()
 {
    if (jj_3R_relationalExpression_1464_5_89()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_equalityExpression_1434_13_90()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_creator_1813_5_132()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_creator_1815_13_140()) {
    jj_scanpos = xsp;
    if (jj_3R_creator_1816_13_141()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_creator_1823_13_142()) {
    jj_scanpos = xsp;
    if (jj_3R_creator_1825_13_143()) {
    jj_scanpos = xsp;
    if (jj_3R_creator_1836_13_144()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_variableInitializer_1042_5_165()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_variableInitializer_1043_9_167()) {
    jj_scanpos = xsp;
    if (jj_3R_variableInitializer_1044_9_168()) return true;
    }
    return false;
  }

  private boolean jj_3R_conditionalAndExpression_1405_13_88()
 {
    if (jj_scan_token(LAND)) return true;
    if (jj_3R_equalityExpression_1430_5_87()) return true;
    return false;
  }

  private boolean jj_3R_primary_1779_13_136()
 {
    if (jj_3R_arguments_1102_5_145()) return true;
    return false;
  }

  private boolean jj_3R_primary_1782_9_128()
 {
    if (jj_3R_literal_1907_5_137()) return true;
    return false;
  }

  private boolean jj_3R_conditionalAndExpression_1401_5_84()
 {
    if (jj_3R_equalityExpression_1430_5_87()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_conditionalAndExpression_1405_13_88()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_variableDeclarator_1011_5_79()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_primary_1763_17_146()
 {
    if (jj_3R_arguments_1102_5_145()) return true;
    return false;
  }

  private boolean jj_3R_primary_1769_9_127()
 {
    if (jj_3R_qualifiedIdentifier_289_5_54()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_primary_1779_13_136()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_3R_type_1134_5_29()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_conditionalOrExpression_1376_13_85()
 {
    if (jj_scan_token(LOR)) return true;
    if (jj_3R_conditionalAndExpression_1401_5_84()) return true;
    return false;
  }

  private boolean jj_3R_primary_1756_13_135()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_primary_1763_17_146()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_primary_1754_13_134()
 {
    if (jj_3R_arguments_1102_5_145()) return true;
    return false;
  }

  private boolean jj_3R_primary_1748_13_133()
 {
    if (jj_3R_arguments_1102_5_145()) return true;
    return false;
  }

  private boolean jj_3R_conditionalOrExpression_1372_5_71()
 {
    if (jj_3R_conditionalAndExpression_1401_5_84()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_conditionalOrExpression_1376_13_85()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_primary_1751_9_126()
 {
    if (jj_scan_token(SUPER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_primary_1754_13_134()) {
    jj_scanpos = xsp;
    if (jj_3R_primary_1756_13_135()) return true;
    }
    return false;
  }

  private boolean jj_3R_variableDeclarators_980_5_58()
 {
    if (jj_3R_variableDeclarator_1011_5_79()) return true;
    return false;
  }

  private boolean jj_3R_primary_1742_9_125()
 {
    if (jj_scan_token(THIS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_primary_1748_13_133()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_primary_1740_9_124()
 {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_creator_1813_5_132()) return true;
    return false;
  }

  private boolean jj_3R_primary_1739_9_123()
 {
    if (jj_3R_parExpression_927_5_81()) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_3R_type_1134_5_29()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_primary_1738_5_120()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_primary_1739_9_123()) {
    jj_scanpos = xsp;
    if (jj_3R_primary_1740_9_124()) {
    jj_scanpos = xsp;
    if (jj_3R_primary_1742_9_125()) {
    jj_scanpos = xsp;
    if (jj_3R_primary_1751_9_126()) {
    jj_scanpos = xsp;
    if (jj_3R_primary_1769_9_127()) {
    jj_scanpos = xsp;
    if (jj_3R_primary_1782_9_128()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_conditionalExpression_1344_13_72()
 {
    if (jj_scan_token(QUESTION)) return true;
    if (jj_3R_expression_1269_5_36()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_conditionalExpression_1340_5_56()) return true;
    return false;
  }

  private boolean jj_3R_blockStatement_579_9_42()
 {
    if (jj_3R_statement_755_5_52()) return true;
    return false;
  }

  private boolean jj_3R_blockStatement_577_9_41()
 {
    if (jj_3R_localVariableDeclarationStatement_953_5_51()) return true;
    return false;
  }

  private boolean jj_3R_blockStatement_576_5_31()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_blockStatement_577_9_41()) {
    jj_scanpos = xsp;
    if (jj_3R_blockStatement_579_9_42()) return true;
    }
    return false;
  }

  private boolean jj_3R_conditionalExpression_1340_5_56()
 {
    if (jj_3R_conditionalOrExpression_1372_5_71()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_conditionalExpression_1344_13_72()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_localVariableDeclarationStatement_953_5_51()
 {
    if (jj_3R_type_1134_5_29()) return true;
    if (jj_3R_variableDeclarators_980_5_58()) return true;
    return false;
  }

  private boolean jj_3R_selector_1701_13_155()
 {
    if (jj_3R_arguments_1102_5_145()) return true;
    return false;
  }

  private boolean jj_3R_block_551_13_86()
 {
    if (jj_3R_blockStatement_576_5_31()) return true;
    return false;
  }

  private boolean jj_3R_selector_1704_9_139()
 {
    if (jj_scan_token(LBRACK)) return true;
    if (jj_scan_token(RBRACK)) return true;
    return false;
  }

  private boolean jj_3R_assignmentExpression_1311_13_78()
 {
    if (jj_scan_token(REM_ASSIGN)) return true;
    if (jj_3R_assignmentExpression_1292_5_50()) return true;
    return false;
  }

  private boolean jj_3R_selector_1696_9_138()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_qualifiedIdentifier_289_5_54()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_selector_1701_13_155()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_assignmentExpression_1308_13_77()
 {
    if (jj_scan_token(DIV_ASSIGN)) return true;
    if (jj_3R_assignmentExpression_1292_5_50()) return true;
    return false;
  }

  private boolean jj_3R_block_547_5_80()
 {
    if (jj_scan_token(LCURLY)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_block_551_13_86()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RCURLY)) return true;
    return false;
  }

  private boolean jj_3R_assignmentExpression_1305_13_76()
 {
    if (jj_scan_token(STAR_ASSIGN)) return true;
    if (jj_3R_assignmentExpression_1292_5_50()) return true;
    return false;
  }

  private boolean jj_3R_selector_1695_5_129()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_selector_1696_9_138()) {
    jj_scanpos = xsp;
    if (jj_3R_selector_1704_9_139()) return true;
    }
    return false;
  }

  private boolean jj_3R_parExpression_927_5_81()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_expression_1269_5_36()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_assignmentExpression_1302_13_75()
 {
    if (jj_scan_token(MINUS_ASSIGN)) return true;
    if (jj_3R_assignmentExpression_1292_5_50()) return true;
    return false;
  }

  private boolean jj_3R_assignmentExpression_1299_13_74()
 {
    if (jj_scan_token(PLUS_ASSIGN)) return true;
    if (jj_3R_assignmentExpression_1292_5_50()) return true;
    return false;
  }

  private boolean jj_3R_assignmentExpression_1296_13_73()
 {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_assignmentExpression_1292_5_50()) return true;
    return false;
  }

  private boolean jj_3R_assignmentExpression_1296_13_57()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_assignmentExpression_1296_13_73()) {
    jj_scanpos = xsp;
    if (jj_3R_assignmentExpression_1299_13_74()) {
    jj_scanpos = xsp;
    if (jj_3R_assignmentExpression_1302_13_75()) {
    jj_scanpos = xsp;
    if (jj_3R_assignmentExpression_1305_13_76()) {
    jj_scanpos = xsp;
    if (jj_3R_assignmentExpression_1308_13_77()) {
    jj_scanpos = xsp;
    if (jj_3R_assignmentExpression_1311_13_78()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_null_505_29_28()
 {
    if (jj_3R_type_1134_5_29()) return true;
    return false;
  }

  private boolean jj_3R_assignmentExpression_1292_5_50()
 {
    if (jj_3R_conditionalExpression_1340_5_56()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_assignmentExpression_1296_13_57()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_postfixExpression_1667_13_131()
 {
    if (jj_scan_token(INC)) return true;
    return false;
  }

  private boolean jj_3R_postfixExpression_1665_13_122()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_postfixExpression_1665_13_130()) {
    jj_scanpos = xsp;
    if (jj_3R_postfixExpression_1667_13_131()) return true;
    }
    return false;
  }

  private boolean jj_3R_postfixExpression_1665_13_130()
 {
    if (jj_scan_token(DEC)) return true;
    return false;
  }

  private boolean jj_3R_postfixExpression_1662_13_121()
 {
    if (jj_3R_selector_1695_5_129()) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(34)) {
    jj_scanpos = xsp;
    if (jj_3R_null_505_29_28()) return true;
    }
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_postfixExpression_1658_5_119()
 {
    if (jj_3R_primary_1738_5_120()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_postfixExpression_1662_13_121()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_postfixExpression_1665_13_122()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_expression_1269_5_36()
 {
    if (jj_3R_assignmentExpression_1292_5_50()) return true;
    return false;
  }

  private boolean jj_3_12()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_referenceType_1195_5_35()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_simpleUnaryExpression_1636_9_118()
 {
    if (jj_3R_postfixExpression_1658_5_119()) return true;
    return false;
  }

  private boolean jj_3_11()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_basicType_1158_5_34()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_simpleUnaryExpression_1629_9_117()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_referenceType_1195_5_35()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_simpleUnaryExpression_1617_5_114()) return true;
    return false;
  }

  private boolean jj_3R_simpleUnaryExpression_1622_9_116()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_basicType_1158_5_34()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_unaryExpression_1573_5_102()) return true;
    return false;
  }

  private boolean jj_3R_simpleUnaryExpression_1618_9_115()
 {
    if (jj_scan_token(LNOT)) return true;
    if (jj_3R_unaryExpression_1573_5_102()) return true;
    return false;
  }

  private boolean jj_3R_simpleUnaryExpression_1617_5_114()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_simpleUnaryExpression_1618_9_115()) {
    jj_scanpos = xsp;
    if (jj_3R_simpleUnaryExpression_1622_9_116()) {
    jj_scanpos = xsp;
    if (jj_3R_simpleUnaryExpression_1629_9_117()) {
    jj_scanpos = xsp;
    if (jj_3R_simpleUnaryExpression_1636_9_118()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_statement_843_9_69()
 {
    if (jj_3R_statementExpression_1229_5_83()) return true;
    if (jj_scan_token(SEMI)) return true;
    return false;
  }

  private boolean jj_3R_statementExpression_1229_5_83()
 {
    if (jj_3R_expression_1269_5_36()) return true;
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_3R_switchBlockStatementGroup_673_5_32()) return true;
    return false;
  }

  private boolean jj_3R_statement_826_9_68()
 {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_3R_parExpression_927_5_81()) return true;
    return false;
  }

  private boolean jj_3R_referenceType_1205_13_55()
 {
    if (jj_scan_token(LBRACK)) return true;
    if (jj_scan_token(RBRACK)) return true;
    return false;
  }

  private boolean jj_3R_unaryExpression_1590_9_110()
 {
    if (jj_3R_simpleUnaryExpression_1617_5_114()) return true;
    return false;
  }

  private boolean jj_3R_referenceType_1200_13_53()
 {
    if (jj_scan_token(LBRACK)) return true;
    if (jj_scan_token(RBRACK)) return true;
    return false;
  }

  private boolean jj_3R_referenceType_1203_9_49()
 {
    if (jj_3R_qualifiedIdentifier_289_5_54()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_referenceType_1205_13_55()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_unaryExpression_1586_9_109()
 {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_unaryExpression_1573_5_102()) return true;
    return false;
  }

  private boolean jj_3R_statement_819_9_67()
 {
    if (jj_scan_token(CONTINUE)) return true;
    if (jj_scan_token(SEMI)) return true;
    return false;
  }

  private boolean jj_3R_unaryExpression_1582_9_108()
 {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_unaryExpression_1573_5_102()) return true;
    return false;
  }

  private boolean jj_3R_statement_815_9_66()
 {
    if (jj_scan_token(BREAK)) return true;
    if (jj_scan_token(SEMI)) return true;
    return false;
  }

  private boolean jj_3R_referenceType_1196_9_48()
 {
    if (jj_3R_basicType_1158_5_34()) return true;
    if (jj_scan_token(LBRACK)) return true;
    if (jj_scan_token(RBRACK)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_referenceType_1200_13_53()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_unaryExpression_1578_9_107()
 {
    if (jj_scan_token(DEC)) return true;
    if (jj_3R_unaryExpression_1573_5_102()) return true;
    return false;
  }

  private boolean jj_3R_referenceType_1195_5_35()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_referenceType_1196_9_48()) {
    jj_scanpos = xsp;
    if (jj_3R_referenceType_1203_9_49()) return true;
    }
    return false;
  }

  private boolean jj_3R_unaryExpression_1574_9_106()
 {
    if (jj_scan_token(INC)) return true;
    if (jj_3R_unaryExpression_1573_5_102()) return true;
    return false;
  }

  private boolean jj_3R_unaryExpression_1573_5_102()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_unaryExpression_1574_9_106()) {
    jj_scanpos = xsp;
    if (jj_3R_unaryExpression_1578_9_107()) {
    jj_scanpos = xsp;
    if (jj_3R_unaryExpression_1582_9_108()) {
    jj_scanpos = xsp;
    if (jj_3R_unaryExpression_1586_9_109()) {
    jj_scanpos = xsp;
    if (jj_3R_unaryExpression_1590_9_110()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_statement_794_9_65()
 {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_statement_786_9_64()
 {
    if (jj_scan_token(DO)) return true;
    if (jj_3R_statement_755_5_52()) return true;
    return false;
  }

  private boolean jj_3R_basicType_1167_9_47()
 {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  private boolean jj_3R_multiplicativeExpression_1546_13_113()
 {
    if (jj_scan_token(REM)) return true;
    if (jj_3R_unaryExpression_1573_5_102()) return true;
    return false;
  }

  private boolean jj_3R_basicType_1165_9_46()
 {
    if (jj_scan_token(LONG)) return true;
    return false;
  }

  private boolean jj_3R_statement_781_9_63()
 {
    if (jj_scan_token(WHILE)) return true;
    if (jj_3R_parExpression_927_5_81()) return true;
    return false;
  }

  private boolean jj_3R_multiplicativeExpression_1543_13_112()
 {
    if (jj_scan_token(DIV)) return true;
    if (jj_3R_unaryExpression_1573_5_102()) return true;
    return false;
  }

  private boolean jj_3R_basicType_1163_9_45()
 {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  private boolean jj_3_8()
 {
    if (jj_scan_token(ELSE)) return true;
    return false;
  }

  private boolean jj_3R_basicType_1161_9_44()
 {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  private boolean jj_3R_multiplicativeExpression_1540_13_103()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_multiplicativeExpression_1540_13_111()) {
    jj_scanpos = xsp;
    if (jj_3R_multiplicativeExpression_1543_13_112()) {
    jj_scanpos = xsp;
    if (jj_3R_multiplicativeExpression_1546_13_113()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_multiplicativeExpression_1540_13_111()
 {
    if (jj_scan_token(STAR)) return true;
    if (jj_3R_unaryExpression_1573_5_102()) return true;
    return false;
  }

  private boolean jj_3R_null_1135_34_33()
 {
    if (jj_3R_basicType_1158_5_34()) return true;
    if (jj_scan_token(LBRACK)) return true;
    if (jj_scan_token(RBRACK)) return true;
    return false;
  }

  private boolean jj_3R_statement_772_13_82()
 {
    if (jj_3R_expression_1269_5_36()) return true;
    return false;
  }

  private boolean jj_3R_statement_776_9_62()
 {
    if (jj_scan_token(SEMI)) return true;
    return false;
  }

  private boolean jj_3R_basicType_1159_9_43()
 {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  private boolean jj_3R_literal_1922_9_154()
 {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_basicType_1158_5_34()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_basicType_1159_9_43()) {
    jj_scanpos = xsp;
    if (jj_3R_basicType_1161_9_44()) {
    jj_scanpos = xsp;
    if (jj_3R_basicType_1163_9_45()) {
    jj_scanpos = xsp;
    if (jj_3R_basicType_1165_9_46()) {
    jj_scanpos = xsp;
    if (jj_3R_basicType_1167_9_47()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_literal_1920_9_153()
 {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_statement_769_9_61()
 {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_statement_772_13_82()) jj_scanpos = xsp;
    if (jj_scan_token(SEMI)) return true;
    return false;
  }

  private boolean jj_3R_literal_1918_9_152()
 {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3R_literal_1916_9_151()
 {
    if (jj_scan_token(DOUBLE_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_multiplicativeExpression_1536_5_95()
 {
    if (jj_3R_unaryExpression_1573_5_102()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_multiplicativeExpression_1540_13_103()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_literal_1914_9_150()
 {
    if (jj_scan_token(LONG_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_literal_1912_9_149()
 {
    if (jj_scan_token(INT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_10()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(78)) {
    jj_scanpos = xsp;
    if (jj_3R_null_1135_34_33()) return true;
    }
    return false;
  }

  private boolean jj_3R_literal_1910_9_148()
 {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_literal_1908_9_147()
 {
    if (jj_scan_token(CHAR_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_statement_757_9_60()
 {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_parExpression_927_5_81()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public JavaCCParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[66];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x2000000,0x100000,0x5c009000,0x5c001000,0x5c001000,0x20000,0x5c407000,0x406000,0x0,0x406000,0xa1cc6000,0xa18c0000,0x0,0x81840000,0x0,0x0,0x81840000,0x81c46000,0x81840000,0x81840000,0xa18c0000,0x0,0x406000,0x0,0x0,0x81840000,0x0,0x81840000,0x0,0x81840000,0x406000,0x406000,0x0,0x0,0x406000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200000,0x200000,0x0,0x0,0x0,0x0,0x81840000,0x0,0x81840000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x81840000,0x406000,0x0,0x0,0x0,0x1040000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0xa04,0xa04,0x210000,0xa00,0xe4a31f5b,0xe4a3155b,0x2000,0xe4820003,0x2000,0xa0,0xe4820003,0xe4820a03,0xe4820003,0xe4820003,0xe4a3155b,0x2000,0xa00,0x2000,0x400000,0xe4830003,0x2000,0xe4830003,0x2000,0xe4820003,0xa00,0xa00,0x8000,0x8000,0xa00,0x400000,0x400000,0x0,0x0,0x8000000,0x1000000,0x1000000,0x12000000,0x12000000,0xc0000000,0xc0000000,0x0,0x0,0xe4820003,0x20000000,0x20003,0xc000,0x4800000,0x4800000,0x20000,0xc000,0x20000,0x20000,0x24000,0x20000,0x20003,0xa00,0x10000,0x20000,0x8000,0x2,};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x4000,0x0,0x4000,0xce4000,0xce4000,0x0,0xce4000,0x0,0x0,0xce4000,0xce4000,0xce4000,0xce4000,0xce4000,0x0,0x4000,0x0,0x0,0xce4000,0x0,0xce4000,0x0,0xce4000,0x0,0x0,0x0,0x0,0x4000,0x3c1,0x3c1,0x10,0x2000,0x0,0x400,0x400,0x1800,0x1800,0x0,0x0,0xe,0xe,0xce4000,0x0,0xce4000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xce4000,0x4000,0x0,0x0,0x0,0xce0000,};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[16];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public JavaCCParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public JavaCCParser(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new JavaCCParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 66; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 66; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public JavaCCParser(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new JavaCCParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 66; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new JavaCCParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 66; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public JavaCCParser(JavaCCParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 66; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(JavaCCParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 66; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[89];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 66; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		   if ((jj_la1_2[i] & (1<<j)) != 0) {
			 la1tokens[64+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 89; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 16; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			   case 5: jj_3_6(); break;
			   case 6: jj_3_7(); break;
			   case 7: jj_3_8(); break;
			   case 8: jj_3_9(); break;
			   case 9: jj_3_10(); break;
			   case 10: jj_3_11(); break;
			   case 11: jj_3_12(); break;
			   case 12: jj_3_13(); break;
			   case 13: jj_3_14(); break;
			   case 14: jj_3_15(); break;
			   case 15: jj_3_16(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
