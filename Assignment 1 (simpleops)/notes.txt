1. For each problem, state its goal in your own words and describe your approach to solve the 
problem along with any issues you encountered and if/how you managed to solve those issues.

[Problem 1 (Understanding j--)]

Goal: To produce a sequence of integers, provided the starting point, stopping point, and incrementative step. 
(Not including largest number if exceding upper bounds)

Approach: I began with a brief brush-up on some Java syntax and reading the Provided Java Lite documentation.
I then tried to approach the incrementation using a for-loop and noticed some of the assignment techniques 
usually used, were not allowed. I also noticed that "<" (LT) is not allowed to be used for some reason, I looked in the
implementation, and saw that it wasn't. To put it simply, I just swapped the conditions and the sign and the ">" worked fine.
Then I just had it print to Standard Output and that was that.

[Problem 2 (Understanding the JVM)]

Goal: To produce a sequence of integers programatically using CLEmitter and bytecode.

Approach: Initially, I was so lost in figuring out how to do this, as I could not figure out what a single CLEmitter
method was doing. The documentation was rather frustrating to weed through, until I realized that I could take a look at
the GenFactorial test file. I did what I could to port over the common segments of code to mine, getting to the point
where I had to code the while loop. I recognized that I needed to utilize the Command-Line Input similarly to the original
Seq.java file, so I tried to follow it as closely as possible. I also had a bit of trouble adding the start and step
together, but after doing it, it makes a lot more sense. This was quite a tough problem, having to weed through the
documentation by myself and such.

[Problem 3 (Arithmetic Operators)]

Goal: Add support for the division(/), modulo(%), and unary plus () operator within the compiler.

Approach: I started by looking at the slides for the implementation of the division operator, and followed those exactly.
I had no idea there were so many steps for setting up a new operator in a compiler. After following those, word for word, 
I went to the next operator. I added support for the Remainder operator within the TokenInfo.java file, then went over to
the JBinaryExpression.java folder and added what I needed to there. Then I updated the Scanner and Parser files to
support the new operator. Finally to implement unary plus, I just updated JUnaryExpression.java and I'm pretty sure 
that's all that I did.

[Problem 4 (Conditional Expression)]

Goal: Add implementation and support of conditional expressions of the form (e ? e1 : e2).

Approach: I was quite lost at first how to approach this, so I initially ran the compiler on the program to see where 
that would get me. I noticed that I needed to add token values for the conditionals, so I started with that. 
Next, I went over to scanner and added the cases for the conditionals. Then, after that, I went into 
JConditionalExpression to add important context for the operators. I first made sure that the type checking was correct,
and then added the codegen info, just like the previous questions. Then I looked at parser. I noticed that there was
a conditionaland statement already, so I copied and edited that, and then changed the assignemnt expression function to
allow for conditional, not conditionaland.

[Problem 5 (Do Statement)]

Goal: ...

Approach: ...

2. Did you receive any help? List the sources along with a short description of the help received.

Source                               Help Received
------                               -------------

...                                  ...

3. List any other comments here. Feel free to provide any feedback on how much you learned from
doing the assignment, and whether you enjoyed doing it.

This was a tough assignemnt, I think maybe a little more guidance in the descriptions of the later problems would be
appreciated, though not needed. Thanks! I had a fun time weeding through all of the files, I'm not used to such a large
codebase!
